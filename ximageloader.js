// Generated by CoffeeScript 1.10.0

/* 
ximageloadr is image upload interface
support drag paste

https://github.com/oliverliye/ximageloader
 */

(function() {
  var Element, XImageloader, defaults, extend, loadImageFromClip, onDrop, onPaste, uploadFile;

  defaults = {
    maxFile: 1,
    types: ['image/jpeg', 'image/png', 'image/jpg', 'image/gif'],
    onFileUploaded: function() {},
    onError: function() {}
  };

  extend = function(d, s) {
    var k, v;
    for (k in s) {
      v = s[k];
      d[k] = v;
    }
    return d;
  };

  Element = (function() {
    function Element(element) {
      this.dom = element;
    }

    Element.prototype.attr = function(name, value) {
      if (!value) {
        return this.dom.getAttribute(name);
      } else {
        return this.dom.setAttribute(name, value);
      }
    };

    Element.prototype.empty = function() {
      return this.dom.innerHTML = "";
    };

    Element.prototype.isDiv = function() {
      return this.dom.nodeName === 'DIV' || this.dom.nodeName === 'div';
    };

    Element.prototype.isImg = function() {
      return this.dom.nodeName === 'IMG' || this.dom.nodeName === 'img';
    };

    return Element;

  })();

  XImageloader = (function() {
    function XImageloader(element, config) {
      this.el = new Element(element);
      if (!this.el.isDiv()) {
        return null;
      }
      this.el.attr('contenteditable', 'true');
      this.config = extend(defaults, config);
      this.el.dom.onpaste = (function(_this) {
        return function(e) {
          return onPaste(_this, e);
        };
      })(this);
      this.el.dom.ondrop = (function(_this) {
        return function(e) {
          e.stopPropagation();
          e.preventDefault();
          return onDrop(_this, e);
        };
      })(this);
      this.el.dom.ondragenter = this.el.dom.ondragover = function(e) {
        e.stopPropagation();
        return e.preventDefault();
      };
      this.el.dom.onblur = (function(_this) {
        return function() {
          return _this.el.empty();
        };
      })(this);
    }

    XImageloader.prototype.isAllowed = function(type) {
      var j, len, ref, t;
      ref = this.config.types;
      for (j = 0, len = ref.length; j < len; j++) {
        t = ref[j];
        if (t.indexOf(type) >= 0) {
          return true;
        }
      }
      return false;
    };

    return XImageloader;

  })();

  onDrop = function(loader, e) {
    var file, j, len, maxFile, ref;
    maxFile = loader.config.maxFile;
    ref = e.dataTransfer.files;
    for (j = 0, len = ref.length; j < len; j++) {
      file = ref[j];
      uploadFile(loader, file);
    }
  };

  onPaste = function(loader, e) {
    var file, i, item, items, j, l, len, len1, ref;
    if (e.clipboardData) {
      items = e.clipboardData.items;
      if (items) {
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (!loader.isAllowed(item.type)) {
            continue;
          }
          uploadFile(loader, item.getAsFile());
        }
        return;
      } else {
        setTimeout((function(_this) {
          return function() {
            var child, l, len1, ref;
            ref = loader.el.dom.childNodes;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              child = ref[l];
              child = new Element(child);
              if (!child.isImg()) {
                continue;
              }
              loadImageFromClip(loader, child.attr('src'));
            }
            loader.el.empty();
          };
        })(this), 1);
      }
    }
    if (window.clipboardData) {
      ref = window.clipboardData.files;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        file = ref[l];
        loadImageFromClip(loader, URL.createObjectURL(file));
      }
      return setTimeout((function(_this) {
        return function() {
          return loader.el.empty();
        };
      })(this), 1);
    }
  };

  loadImageFromClip = function(loader, src) {
    var img;
    if (src.match(/^webkit\-fake\-url\:\/\//)) {
      console.log("error");
    }
    img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = (function(_this) {
      return function() {
        var canvas, ctx, dataURL;
        canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        dataURL = canvas.toDataURL('image/png');
        uploadFile(loader, dataURL);
        return console.log(dataURL);
      };
    })(this);
    img.onerror = (function(_this) {
      return function() {
        return loader.config.onError();
      };
    })(this);
    return img.src = src;
  };

  uploadFile = function(loader, file) {
    var formData, xhr;
    formData = new FormData();
    xhr = new XMLHttpRequest();
    if (typeof file === 'object') {
      formData.append('file', file, file.name);
    } else {
      formData.append('file', file);
    }
    xhr.open('POST', loader.config.url);
    xhr.onload = function() {
      if (xhr.status === 200 || xhr.status === 201) {
        return loader.config.onFileUploaded(xhr.responseText);
      } else {
        return loader.config.onError();
      }
    };
    return xhr.send(formData);
  };

  window.XImageloader = XImageloader;

}).call(this);
